/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package src.com.firdaus.program;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.Collections;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author slackware
 */
public class Frame extends javax.swing.JFrame {

    /**
     * Creates new form Frame
     */
    private DefaultTableModel dtmTableAgen;
    private DefaultTableModel dtmTableJarak;
    
    public Frame() {
        setLookNFell();
        initComponents();
        setLocation();
        dtmTableAgen = (DefaultTableModel) tableAgen.getModel();
        dtmTableJarak = (DefaultTableModel) tableJarak.getModel();
        initTableJarak();
        initTableAgen();
    }
    
    private void setLookNFell() {
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (ClassNotFoundException ex) {
        } catch (InstantiationException ex) {
        } catch (IllegalAccessException ex) {
        } catch (UnsupportedLookAndFeelException ex) {
        }
    }
    
    private void setLocation() {
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        int lebar = (screen.width - this.getSize().width) / 2;
        int tinggi = (screen.height - this.getSize().height) / 2;
        this.setLocation(lebar, tinggi);
    }
    
    private void initTableJarak() {
        String[] jkwmkc = FileReaderWriter.readJumlahAgen();
        if (jkwmkc[0] != null) {
            tfJumlahAgen.setText(jkwmkc[0]);
            tfKapasitas.setText(jkwmkc[1]);
            tfWaktuBerangkat.setText(jkwmkc[2]);
            tfWaktuMax.setText(jkwmkc[3]);
            tfKecepatan.setText(jkwmkc[4]);
            int jmlAgen = Integer.parseInt(jkwmkc[0]);
            int jmlAgen2 = jmlAgen;
            ArrayList<String> c = FileReaderWriter.readJarak();
            if (c.size() > 0) {
                ArrayList<Double> jarak = new ArrayList<Double>();
                for (int i = 0; i < c.size(); i++) {
                    System.out.println(c.get(i));
                    StringTokenizer st = new StringTokenizer(c.get(i), ",");
                    System.out.println(jmlAgen);
                    double row[] = new double[jmlAgen];
                    int count = 0;
                    while (st.hasMoreTokens()) {
                        String a = (String) st.nextElement().toString().trim();
                        System.out.println("a = " + a);
                        jarak.add(Double.parseDouble(a));
                    }
                    jmlAgen--;
                }
                int x = 0;
                //JOptionPane.showMessageDialog(null, jarak.size());
                for (int i = 0; i < jmlAgen2; i++) {
                    for (int j = i + 1; j <= jmlAgen2; j++) {
                        dtmTableJarak.addRow(new Object[]{"Agen " + i, "Agen " + j, jarak.get(x)});
                        x++;
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "data jarak Agen masih kosong");
            }
        } else {
            JOptionPane.showMessageDialog(null, "data jumlah Agen masih kosong");
        }
    }
    
    private void initTableAgen() {
        ArrayList<Agen> al = FileReaderWriter.readAgen();
        if (al.size() > 0) {
            for (Agen a : al) {
                dtmTableAgen.addRow(new Object[]{a.getNama(), a.getDemand(), a.getTimeService(), a.getTimeWindow()[0], a.getTimeWindow()[1]});
                //System.out.println(a.getNama() + ", " + a.getDemand() + ", " + a.getTimeService() + ", " + a.getTimeWindow()[0] + ", " + a.getTimeWindow()[1]);
            }
        } else {
            JOptionPane.showMessageDialog(null, "data Agen masih kosong");
        }
    }
    
    public void hapusTabel() {
        int row = dtmTableAgen.getRowCount();
        for (int i = 0; i < row; i++) {
            dtmTableAgen.removeRow(0);
            dtmTableJarak.removeRow(0);
        }
        int row2 = dtmTableJarak.getRowCount();
        for (int i = 0; i < row2; i++) {
            dtmTableJarak.removeRow(0);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tfKapasitas = new javax.swing.JTextField();
        tfWaktuBerangkat = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableAgen = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableJarak = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        tfJumlahAgen = new javax.swing.JTextField();
        btUpdateJumlahData = new javax.swing.JButton();
        btSimpanData = new javax.swing.JButton();
        btRunProses = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        tfWaktuMax = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tfKecepatan = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Kapasitas Kendaraan");

        jLabel2.setText("Waktu Berangkat(HH:MM)");

        tfWaktuBerangkat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfWaktuBerangkatActionPerformed(evt);
            }
        });

        tableAgen.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tableAgen.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Agen", "Demand", "TS", "TW HH", "TW MM"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableAgen.setRowHeight(20);
        tableAgen.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tableAgen);

        tableJarak.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tableJarak.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Agen A", "Agen B", "Jarak"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableJarak.setRowHeight(20);
        tableJarak.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tableJarak);

        jLabel4.setText("Jumlah Agen");

        tfJumlahAgen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfJumlahAgenActionPerformed(evt);
            }
        });

        btUpdateJumlahData.setText("Update Jumlah Data");
        btUpdateJumlahData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUpdateJumlahDataActionPerformed(evt);
            }
        });

        btSimpanData.setText("Simpan Data");
        btSimpanData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSimpanDataActionPerformed(evt);
            }
        });

        btRunProses.setText("Run Process");
        btRunProses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRunProsesActionPerformed(evt);
            }
        });

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        jLabel3.setText("Waktu Maximal(HH:MM)");

        tfWaktuMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfWaktuMaxActionPerformed(evt);
            }
        });

        jLabel6.setText("Kecepatan");

        tfKecepatan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfKecepatanActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 204));
        jLabel7.setText("Vehicle Routing Problem with Time Windows dengan Algoritma Tabu Search");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Input 1:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Output:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("Input 2:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setText("Input 3:");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setText("Comment:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel6)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(tfKecepatan, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                        .addComponent(jLabel4)
                                                        .addGap(82, 82, 82))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel1)
                                                        .addGap(42, 42, 42)))
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(tfJumlahAgen, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                                                    .addComponent(tfKapasitas)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addGap(18, 18, 18)
                                                .addComponent(tfWaktuBerangkat, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(jLabel3)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(tfWaktuMax, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(99, 99, 99)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel11)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(btSimpanData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btUpdateJumlahData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btRunProses, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(153, 153, 153))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel8)
                                    .addContainerGap()))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 595, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel9))
                        .addGap(6, 6, 6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(tfJumlahAgen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(tfKapasitas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(tfWaktuBerangkat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(tfWaktuMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(tfKecepatan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btUpdateJumlahData)
                                .addGap(18, 18, 18)
                                .addComponent(btSimpanData)
                                .addGap(18, 18, 18)
                                .addComponent(btRunProses)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btUpdateJumlahDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUpdateJumlahDataActionPerformed
        try {
            int jmlAgen = Integer.parseInt(tfJumlahAgen.getText());
            hapusTabel();
            for (int i = 0; i < jmlAgen; i++) {
                dtmTableAgen.addRow(new Object[]{"Agen " + (i + 1), 0, 0, 0, 0});
            }
            
            for (int i = 0; i < jmlAgen; i++) {
                for (int j = i + 1; j <= jmlAgen; j++) {
                    dtmTableJarak.addRow(new Object[]{"Agen " + i, "Agen " + j, 0});
                }
            }
        } catch (NumberFormatException x) {
            JOptionPane.showMessageDialog(null, "inputan harus angka");
        }
    }//GEN-LAST:event_btUpdateJumlahDataActionPerformed

    private void btSimpanDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSimpanDataActionPerformed
        try {
            if (tfJumlahAgen.getText().trim().length() > 0 && tfKapasitas.getText().trim().length() > 0 && tfWaktuBerangkat.getText().trim().length() > 0 && tfWaktuMax.getText().trim().length() > 0 && tfKecepatan.getText().trim().length() > 0) {
                int rowcountTbAgen = dtmTableAgen.getRowCount();
                tfJumlahAgen.setText(rowcountTbAgen + "");
                Integer.parseInt(tfKapasitas.getText().trim());
                String jkwmkc[] = {rowcountTbAgen + "", tfKapasitas.getText().trim(), tfWaktuBerangkat.getText().trim(), tfWaktuMax.getText().trim(), tfKecepatan.getText().trim()};
                FileReaderWriter.writeJumlahAgen(jkwmkc);
                
                ArrayList<Agen> al = new ArrayList<Agen>();
                for (int i = 0; i < rowcountTbAgen; i++) {
                    Agen a = new Agen();
                    a.setNama(dtmTableAgen.getValueAt(i, 0).toString().trim());
                    a.setDemand(Integer.parseInt(dtmTableAgen.getValueAt(i, 1).toString().trim()));
                    a.setTimeService(Integer.parseInt(dtmTableAgen.getValueAt(i, 2).toString().trim()));
                    int tw[] = {Integer.parseInt(dtmTableAgen.getValueAt(i, 3).toString().trim()), Integer.parseInt(dtmTableAgen.getValueAt(i, 4).toString().trim())};
                    a.setTimeWindow(tw);
                    al.add(a);
                }
                FileReaderWriter.writeAgen(al);
                
                ArrayList<Double> z = new ArrayList<Double>();
                int rowcountTbJarak = dtmTableJarak.getRowCount();
                for (int i = 0; i < rowcountTbJarak; i++) {
                    z.add(Double.parseDouble(dtmTableJarak.getValueAt(i, 2).toString().trim()));
                }
                FileReaderWriter.writeJarak(rowcountTbAgen, z);
            } else {
                JOptionPane.showMessageDialog(null, "inputan kolom masih kosong");
            }
        } catch (NumberFormatException x) {
            JOptionPane.showMessageDialog(null, "inputan kolom tabel harus angka");
        } catch (NullPointerException x) {
            JOptionPane.showMessageDialog(null, "inputan kolom tabel harus angka");
        }
    }//GEN-LAST:event_btSimpanDataActionPerformed

    private void btRunProsesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRunProsesActionPerformed
        // TODO add your handling code here:
        String[] jkwm = FileReaderWriter.readJumlahAgen();
        int jmlAgen = 0;
        int tStart[] = new int[2];
        if (jkwm[0] != null) {
            jmlAgen = Integer.parseInt(jkwm[0]);
            Q = Integer.parseInt(jkwm[1].trim());
            StringTokenizer st = new StringTokenizer(jkwm[2], ":");
            tStart[0] = Integer.parseInt(st.nextElement().toString().trim());
            tStart[1] = Integer.parseInt(st.nextElement().toString().trim());
            
            StringTokenizer stoken = new StringTokenizer(jkwm[3], ":");
            tMax[0] = Integer.parseInt(stoken.nextElement().toString().trim());
            tMax[1] = Integer.parseInt(stoken.nextElement().toString().trim());
            kec = Integer.parseInt(jkwm[4]);
            
            ArrayList<String> c = FileReaderWriter.readJarak();
            if (c.size() > 0) {
                ArrayList<DataJarak> dataJarakList = new ArrayList<DataJarak>();
                for (int i = 0; i < c.size(); i++) {
                    StringTokenizer st2 = new StringTokenizer(c.get(i), ",");
                    int count = 1;
                    while (st2.hasMoreTokens()) {
                        String a = (String) st2.nextElement().toString().trim();
                        DataJarak dj = new DataJarak();
                        dj.setFrom(i);
                        dj.setTo((i + count));
                        dj.setJarak(Double.parseDouble(a));
                        count++;
                        dataJarakList.add(dj);
                    }
                }
                
                Agen a0 = new Agen();
                a0.setNama("Agen 0");
                a0.setJarakAgenLain(getJarakAgen(0, dataJarakList, jmlAgen + 1));

                ArrayList<Agen> al = FileReaderWriter.readAgen();
                for (int i = 0; i < al.size(); i++) {
                    al.get(i).setJarakAgenLain(getJarakAgen((i + 1), dataJarakList, jmlAgen + 1));
                }
                
                agenListUpdate.clear();
                agenListUpdate.addAll(al);
                
                ruteSemua.clear();
                
                int sisaAgenBelumDikunjungi = 0;
                
                int jumlahKendaraan = 0;
                while (agenListUpdate.size() > 0 && sisaAgenBelumDikunjungi != agenListUpdate.size()) {
                    Q = Integer.parseInt(jkwm[1].trim());
                    //tStart[0] = 10;
                    //tStart[1] = 00;
                    System.out.println("==========Berangkat Kendaraan Ke " + (jumlahKendaraan + 1) + "===========");
                    System.out.println("Q = " + Q);
                    System.out.println("t0 = " + tStart[0] + ":" + tStart[1]);
                    System.out.println("Nama : " + a0.getNama());
                    
                    sisaAgenBelumDikunjungi = agenListUpdate.size();
                    runProcess(a0, agenListUpdate, tStart);
                    System.out.println("Agen Belum Terkunjungi : ");
                    for (Agen agen : agenListUpdate) {
                        System.out.println("" + agen.getNama());
                    }
                    System.out.println("jalur : ");
                    
                    ArrayList<Agen> jalurCopy = new ArrayList<Agen>();
                    jalurCopy.addAll(jalur);
                    ruteSemua.add(jalurCopy);
                    jalur.clear();
                    
                    System.out.println("===================Selesai===================");
                    jumlahKendaraan++;
                }
                
                sb=new StringBuffer();
                
                if (agenListUpdate.size() > 0) {//ada yang tidak dikunjungi
                    checkKelayakan(a0, tStart);
                    jumlahKendaraan -= 1;
                    ruteSemua.remove(ruteSemua.size() - 1);
                }
                
                System.out.println("jumlah kendaraan : " + jumlahKendaraan);
                sb.append("\nJumlah kendaraan : " + jumlahKendaraan+"\n");
                
                for (int i = 0; i < ruteSemua.size(); i++) {
                    ArrayList<Agen> jalur = (ArrayList<Agen>) ruteSemua.get(i);
                    System.out.print("Jalur ke " + (i + 1) + " : ");
                    sb.append("\nJalur ke " + (i + 1) + " : ");
                    for (int j = 0; j < jalur.size(); j++) {
                        //System.out.print(" {" + jalur.get(j).getNama() + ", Qsisa : " + jalur.get(j).getQ() + ", tNew" + jalur.get(j).gettNew()[0] + ":" + jalur.get(j).gettNew()[1]+"}");
                        System.out.print(" " + jalur.get(j).getNama());
                        sb.append(" " + jalur.get(j).getNama());
                    }
                    double unSorted[] = jalur.get(jalur.size() - 1).getJarakAgenLain();
                    System.out.println("");
                    sb.append("\n");
                    for (int k = 0; k < unSorted.length; k++) {
                        System.out.print("#" + unSorted[k] + " ");
                        sb.append("#" + unSorted[k] + " ");
                    }
                    int ti = (int) Math.round(((double) unSorted[0] / (double) kec * (double) 60));
                    int tNew[] = addTime(jalur.get(jalur.size() - 1).gettNew(), ti);
                    System.out.println("\nStart pulang : " + jalur.get(jalur.size() - 1).gettNew()[0] + ":" + jalur.get(jalur.size() - 1).gettNew()[1]);
                    sb.append("\nStart pulang : " + jalur.get(jalur.size() - 1).gettNew()[0] + ":" + jalur.get(jalur.size() - 1).gettNew()[1]);
                    System.out.println("Waktu tempuh pulang : " + ti + " menit");
                    sb.append("\nWaktu tempuh pulang : " + ti + " menit");
                    System.out.println("Waktu tiba di depot/A0 : " + tNew[0] + ":" + tNew[1]);
                    sb.append("\nWaktu tiba di depot/A0 : " + tNew[0] + ":" + tNew[1]);
                    if (checkLessThanTimeWindow(tMax, tNew)) {
                        System.out.println("tepat waktu");
                        sb.append("\ntepat waktu");
                    } else {
                        System.out.println("telat");
                        sb.append("\ntelat");
                    }
                    System.out.println("");
                    sb.append("\n");
                    textArea.setText(sb.toString());
                }
            } else {
                JOptionPane.showMessageDialog(null, "data jarak Agen masih kosong");
            }
        } else {
            JOptionPane.showMessageDialog(null, "data jumlah Agen masih kosong");
        }

    }//GEN-LAST:event_btRunProsesActionPerformed

    private void tfJumlahAgenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfJumlahAgenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfJumlahAgenActionPerformed

    private void tfWaktuBerangkatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfWaktuBerangkatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfWaktuBerangkatActionPerformed

    private void tfWaktuMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfWaktuMaxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfWaktuMaxActionPerformed

    private void tfKecepatanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfKecepatanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfKecepatanActionPerformed
    
    private Agen runProcess(Agen previous, ArrayList<Agen> agenList, int tStart[]) {
        System.out.println("Agen List Size : " + agenList.size());
        System.out.print("Unsorted jarak : ");
        double unSorted[] = previous.getJarakAgenLain();
        for (int i = 0; i < unSorted.length; i++) {
            System.out.print("#" + unSorted[i] + " ");
        }
        System.out.println("");
        System.out.print("Sorted jarak : ");
        double sorted[] = getSortedDistant(unSorted);
        for (int i = 0; i < sorted.length; i++) {
            System.out.print("#" + sorted[i] + " ");
        }
        System.out.println("");
        
        Agen next = new Agen();
        for (int i = 0; i < sorted.length; i++) {//meloop masing2 jarak dari mulai yang terdekat
            if (sorted[i] != 0) {//jika jarak lebih tidak = 0
                int idx = checkIndex(sorted[i], unSorted);//mencari posisi index/urutan agen yang jaraknya adalah sorted[i]
                System.out.println("jarak = " + sorted[i] + " index = " + idx);
                boolean isAgenNextExist = false;
                for (Agen ag : agenList) {//mengecheck ada tidaknya agen tersebut, kalau ada maka belum dikunjungi, kalau tidak berarti sudah dikunjung
                    if (ag.getNama().equals("Agen " + (idx))) {
                        next = ag;
                        System.out.println("Agen Selanjutnya : " + next.getNama());
                        isAgenNextExist = true;
                        break;
                    } else {
                        isAgenNextExist = false;
                    }
                }
                
                if (isAgenNextExist) {
                    
                    int ti = (int) Math.round(((double) sorted[i] / (double) kec * (double) 60));
                    int tNew[] = addTime(tStart, (ti + next.getTimeService()));
                    
                    if (Q >= next.getDemand()) {
                        if (checkLessThanTimeWindow(next.getTimeWindow(), tNew)) {
                            
                            System.out.println("\n");
                            System.out.println("##############################################");
                            System.out.println("Nama : " + next.getNama());
                            System.out.println("Demand : " + next.getDemand());
                            
                            System.out.println("Real waktu tempuh = " + ((double) sorted[i] / (double) kec * (double) 60));
                            System.out.println("Waktu tempuh = " + ti);
                            System.out.println("Time Service : " + next.getTimeService());
                            System.out.println("Total time = " + (ti + next.getTimeService()));
                            System.out.println("Time Start : " + tStart[0] + " " + tStart[1]);
                            System.out.println("tNew = " + tNew[0] + ":" + tNew[1]);
                            System.out.println("Time Window : " + next.getTimeWindow()[0] + " " + next.getTimeWindow()[1]);
                            System.out.println("Check demand : " + (Q >= next.getDemand()));
                            System.out.println("Check Less Than Time Window : " + checkLessThanTimeWindow(next.getTimeWindow(), tNew));
                            
                            Q -= next.getDemand();
                            System.out.println("Q sisa = " + Q);
                            
                            next.setQ(Q);
                            next.settNew(tNew);
                            jalur.add(next);
                            
                            ArrayList<Agen> newAgenList = new ArrayList<Agen>();
                            newAgenList.addAll(agenList);
                            for (int j = 0; j < agenList.size(); j++) {
                                if (agenList.get(j).getNama().equals("Agen " + idx)) {
                                    newAgenList.remove(j);
                                    agenListUpdate.clear();
                                    agenListUpdate.addAll(newAgenList);
                                    if (newAgenList.size() > 0) {
                                        next.setNextAgen(runProcess(next, newAgenList, tNew));
                                    }
                                    break;
                                }
                            }
                            break;
                        } else {
                            //time window tidak memenuhi lanjut ke paling dekat berikutnya
                            System.out.println("Agen " + idx + " tidak memenuhi TW");
                        }
                    } else {
                        //demand tidak memenuhi lanjut ke paling dekat berikutnya
                        System.out.println("Agen " + idx + " tidak memenuhi demand");
                    }
                }
            }
        }
        if (next.getNama().equals("")) {
            next.setNextAgen(null);
        }
        return next;
    }
    
    private double[] getSortedDistant(double[] jarak) {
        double[] temp = new double[jarak.length];
        ArrayList<Double> x = new ArrayList<Double>();
        for (int i = 0; i < jarak.length; i++) {
            x.add(jarak[i]);
        }
        Collections.sort(x);
        Object z[] = x.toArray();
        for (int i = 0; i < z.length; i++) {
            temp[i] = Double.parseDouble(z[i].toString());
        }
        return temp;
    }
    
    private int[] addTime(int[] time, int menit) {
        int timebaru[] = new int[2];
        int menitBaru = time[1] + menit;
        if (menitBaru >= 60) {
            int jam = menitBaru / 60;
            int menitSisa = menitBaru % 60;
            timebaru[0] = time[0] + jam;
            timebaru[1] = menitSisa;
        } else {
            timebaru[0] = time[0];
            timebaru[1] = menitBaru;
        }
        
        if (timebaru[0] == 24) {
            timebaru[0] = 00;
        } else if (timebaru[0] > 24) {
            timebaru[0] = timebaru[0] - 24;
        }
        return timebaru;
    }
    
    private boolean checkLessThanTimeWindow(int[] tw, int[] tnew) {
        //tw 00-03 tNew 21-23, 
        //batasan masalah : jarak antara agen satu dg yg lain tidak lebih dari 3 jam, 
        //bila jam antar antara jam 3 pagi - 21 malam
        if (tw[0] >= 0 && tw[0] <= 3 && tnew[0] >= 21 && tnew[0] <= 23) {
            return true;
        } else {
            if (tw[0] - tnew[0] > 0) {
                return true;
            } else if (tw[0] - tnew[0] == 0) {
                if (tw[1] - tnew[1] >= 0) {
                    return true;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        }
    }
    
    private int checkIndex(double jarak, double[] unsorted) {
        int x = 0;
        for (int i = 0; i < unsorted.length; i++) {
            if (jarak == unsorted[i]) {
                x = i;
                break;
            }
        }
        return x;
    }
    
    private double[] getJarakAgen(int from, ArrayList<DataJarak> dataJarakList, int ukuran) {
        double x[] = new double[ukuran];
        int count = 0;
        for (int to = 0; to < ukuran; to++) {
            if (from > to) {
                for (DataJarak dj : dataJarakList) {
                    if (dj.getFrom() == to && dj.getTo() == from) {
                        x[count] = dj.getJarak();
                        count++;
                        break;
                    }
                }
            } else if (from < to) {
                for (DataJarak dj : dataJarakList) {
                    if (dj.getFrom() == from && dj.getTo() == to) {
                        x[count] = dj.getJarak();
                        count++;
                        break;
                    }
                }
            } else {
                x[count] = 0;
                count++;
            }
        }
        return x;
    }
    
    private void checkKelayakan(Agen a0, int tStart[]) {
        System.out.println("Check kelayakan antar ke masing-masing Agen ");
        sb.append("Check kelayakan antar ke masing-masing Agen ");
        System.out.print("Unsorted jarak : ");
        sb.append("\nUnsorted jarak : \n");
        double unSorted[] = a0.getJarakAgenLain();
        for (int i = 0; i < unSorted.length; i++) {
            System.out.print("#" + unSorted[i] + " ");
            sb.append("#" + unSorted[i] + " ");
        }
        System.out.println("");
        sb.append("\n");
        System.out.print("Sorted jarak : ");
        sb.append("\nSorted jarak : \n");
        double sorted[] = getSortedDistant(unSorted);
        for (int i = 0; i < sorted.length; i++) {
            System.out.print("#" + sorted[i] + " ");
            sb.append("#" + sorted[i] + " ");
        }
        System.out.println("");
        sb.append("\n");
        Agen next = new Agen();
        for (int i = 0; i < sorted.length; i++) {//meloop masing2 jarak dari mulai yang terdekat
            if (sorted[i] != 0) {//jika jarak lebih tidak = 0
                int idx = checkIndex(sorted[i], unSorted);//mencari posisi index/urutan agen yang jaraknya adalah sorted[i]
                //System.out.println("jarak = " + sorted[i] + " index = " + idx);
                boolean isAgenNextExist = false;
                for (Agen ag : agenListUpdate) {//mengecheck ada tidaknya agen tersebut, kalau ada maka belum dikunjungi, kalau tidak berarti sudah dikunjung
                    if (ag.getNama().equals("Agen " + (idx))) {
                        next = ag;
                        isAgenNextExist = true;
                        break;
                    } else {
                        isAgenNextExist = false;
                    }
                }
                
                if (isAgenNextExist) {
                    int ti = (int) Math.round(((double) sorted[i] / (double) kec * (double) 60));
                    int tNew[] = addTime(tStart, (ti + next.getTimeService()));
                    
                    if (Q < next.getDemand()) {
                        for (Agen x : agenListUpdate) {
                            if (x.getNama().equals("Agen " + (idx))) {
                                System.out.println(x.getNama() + " : demand lebih besar dari kapasitas kendaraan");
                                sb.append("\n"+x.getNama() + " : demand lebih besar dari kapasitas kendaraan\n");
                                break;
                            }
                        }
                    }
                    if (!checkLessThanTimeWindow(next.getTimeWindow(), tNew)) {
                        for (Agen x : agenListUpdate) {
                            if (x.getNama().equals("Agen " + (idx))) {
                                System.out.println(x.getNama() + " : tidak dapat mencapai sebelum time window");
                                sb.append("\n"+x.getNama() + " : tidak dapat mencapai sebelum time window\n");
                                break;
                            }
                        }
                    }
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
    }
    
    private ArrayList<Agen> agenListUpdate = new ArrayList<Agen>();
    private ArrayList<Agen> jalur = new ArrayList<Agen>();
    private ArrayList ruteSemua = new ArrayList();
    private int Q;
    private int kec;
    private int[] tMax = {15, 00};
    StringBuffer sb = new StringBuffer();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btRunProses;
    private javax.swing.JButton btSimpanData;
    private javax.swing.JButton btUpdateJumlahData;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tableAgen;
    private javax.swing.JTable tableJarak;
    private javax.swing.JTextArea textArea;
    private javax.swing.JTextField tfJumlahAgen;
    private javax.swing.JTextField tfKapasitas;
    private javax.swing.JTextField tfKecepatan;
    private javax.swing.JTextField tfWaktuBerangkat;
    private javax.swing.JTextField tfWaktuMax;
    // End of variables declaration//GEN-END:variables
}
